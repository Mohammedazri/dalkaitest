@isTest
public class wwwDalkiaFrReferentielPartenaiWebErrTest {
	
	@isTest static void coverGeneratedCodeTypes() {
		Test.setMock(WebServiceMock.class, new wwwDalkiaFrReferentielPartenaireMockErr());
		wwwDalkiaFrReferentielPartenaire parentObject = new wwwDalkiaFrReferentielPartenaire();
		new wwwDalkiaFrReferentielPartenaire.adresse();
		new wwwDalkiaFrReferentielPartenaire.adresseA1();
		new wwwDalkiaFrReferentielPartenaire.adressePA1();
		new wwwDalkiaFrReferentielPartenaire.adressePA2();
		new wwwDalkiaFrReferentielPartenaire.adressePartenaire();
		new wwwDalkiaFrReferentielPartenaire.adressePartenaireA1();
		new wwwDalkiaFrReferentielPartenaire.affacturage();
		new wwwDalkiaFrReferentielPartenaire.affacturageA1();
		new wwwDalkiaFrReferentielPartenaire.affacturagePA1();
		new wwwDalkiaFrReferentielPartenaire.affacturagePA2();
		new wwwDalkiaFrReferentielPartenaire.AjouterSiret();
		new wwwDalkiaFrReferentielPartenaire.ajouterSiretReponse();
		new wwwDalkiaFrReferentielPartenaire.ajouterSiretRequete();
		new wwwDalkiaFrReferentielPartenaire.AjouterSiretResponse();
		new wwwDalkiaFrReferentielPartenaire.chorus();
		new wwwDalkiaFrReferentielPartenaire.chorusP1();
		new wwwDalkiaFrReferentielPartenaire.chorusPA1();
		new wwwDalkiaFrReferentielPartenaire.chorusPA2();
		new wwwDalkiaFrReferentielPartenaire.classification();
		new wwwDalkiaFrReferentielPartenaire.classificationP1();
		new wwwDalkiaFrReferentielPartenaire.classificationPA1();
		new wwwDalkiaFrReferentielPartenaire.classificationPA2();
		new wwwDalkiaFrReferentielPartenaire.classificationPR1();
		new wwwDalkiaFrReferentielPartenaire.client();
		new wwwDalkiaFrReferentielPartenaire.clientP1();
		new wwwDalkiaFrReferentielPartenaire.clientPA1();
		new wwwDalkiaFrReferentielPartenaire.clientPA2();
		new wwwDalkiaFrReferentielPartenaire.clientPR1();
		new wwwDalkiaFrReferentielPartenaire.conditionsPaiementDefaut();
		new wwwDalkiaFrReferentielPartenaire.conditionsPaiementDefautP1();
		new wwwDalkiaFrReferentielPartenaire.conditionsPaiementDefautPA1();
		new wwwDalkiaFrReferentielPartenaire.conditionsPaiementDefautPA2();
		new wwwDalkiaFrReferentielPartenaire.conditionsPaiementDefautPR1();
		new wwwDalkiaFrReferentielPartenaire.ConsulterAdresse();
		new wwwDalkiaFrReferentielPartenaire.consulterAdresseReponse();
		new wwwDalkiaFrReferentielPartenaire.consulterAdresseRequete();
		new wwwDalkiaFrReferentielPartenaire.ConsulterAdresseResponse();
		new wwwDalkiaFrReferentielPartenaire.ConsulterDemandeAdresse();
		new wwwDalkiaFrReferentielPartenaire.consulterDemandeAdresseReponse();
		new wwwDalkiaFrReferentielPartenaire.consulterDemandeAdresseRequete();
		new wwwDalkiaFrReferentielPartenaire.ConsulterDemandeAdresseResponse();
		new wwwDalkiaFrReferentielPartenaire.ConsulterDemandePartenaire();
		new wwwDalkiaFrReferentielPartenaire.consulterDemandePartenaireReponse();
		new wwwDalkiaFrReferentielPartenaire.consulterDemandePartenaireRequete();
		new wwwDalkiaFrReferentielPartenaire.ConsulterDemandePartenaireResponse();
		new wwwDalkiaFrReferentielPartenaire.ConsulterPartenaire();
		new wwwDalkiaFrReferentielPartenaire.consulterPartenaireReponse();
		new wwwDalkiaFrReferentielPartenaire.consulterPartenaireRequete();
		new wwwDalkiaFrReferentielPartenaire.ConsulterPartenaireResponse();
		new wwwDalkiaFrReferentielPartenaire.CreerAdresse();
		new wwwDalkiaFrReferentielPartenaire.creerAdresseReponse();
		new wwwDalkiaFrReferentielPartenaire.creerAdresseRequete();
		new wwwDalkiaFrReferentielPartenaire.CreerAdresseResponse();
		new wwwDalkiaFrReferentielPartenaire.CreerPartenaire();
		new wwwDalkiaFrReferentielPartenaire.CreerPartenaireIdExterne();
		new wwwDalkiaFrReferentielPartenaire.creerPartenaireIdExterneReponse();
		new wwwDalkiaFrReferentielPartenaire.creerPartenaireIdExterneRequete();
		new wwwDalkiaFrReferentielPartenaire.CreerPartenaireIdExterneResponse();
		new wwwDalkiaFrReferentielPartenaire.creerPartenaireReponse();
		new wwwDalkiaFrReferentielPartenaire.creerPartenaireRequete();
		//new wwwDalkiaFrReferentielPartenaire.CreerPartenaireResponse();
		new wwwDalkiaFrReferentielPartenaire.DemanderCreationAdresse();
		new wwwDalkiaFrReferentielPartenaire.demanderCreationAdresseReponse();
		new wwwDalkiaFrReferentielPartenaire.demanderCreationAdresseRequete();
		new wwwDalkiaFrReferentielPartenaire.DemanderCreationAdresseResponse();
		new wwwDalkiaFrReferentielPartenaire.DemanderCreationPartenaire();
		new wwwDalkiaFrReferentielPartenaire.demanderCreationPartenaireReponse();
		new wwwDalkiaFrReferentielPartenaire.demanderCreationPartenaireRequete();
		new wwwDalkiaFrReferentielPartenaire.DemanderCreationPartenaireResponse();
		new wwwDalkiaFrReferentielPartenaire.DemanderModificationAdresse();
		new wwwDalkiaFrReferentielPartenaire.demanderModificationAdresseReponse();
		new wwwDalkiaFrReferentielPartenaire.demanderModificationAdresseRequete();
		new wwwDalkiaFrReferentielPartenaire.DemanderModificationAdresseResponse();
		new wwwDalkiaFrReferentielPartenaire.DemanderModificationPartenaire();
		new wwwDalkiaFrReferentielPartenaire.demanderModificationPartenaireReponse();
		new wwwDalkiaFrReferentielPartenaire.demanderModificationPartenaireRequete();
		new wwwDalkiaFrReferentielPartenaire.DemanderModificationPartenaireResponse();
		new wwwDalkiaFrReferentielPartenaire.etablissement();
		new wwwDalkiaFrReferentielPartenaire.etablissementP1();
		new wwwDalkiaFrReferentielPartenaire.etablissementPA1();
		new wwwDalkiaFrReferentielPartenaire.etablissementPA2();
		new wwwDalkiaFrReferentielPartenaire.etablissementPR1();
		new wwwDalkiaFrReferentielPartenaire.fournisseur();
		new wwwDalkiaFrReferentielPartenaire.fournisseurP1();
		new wwwDalkiaFrReferentielPartenaire.fournisseurPA1();
		new wwwDalkiaFrReferentielPartenaire.fournisseurPA2();
		new wwwDalkiaFrReferentielPartenaire.fournisseurPR1();
		new wwwDalkiaFrReferentielPartenaire.immatriculationsAnterieures();
		new wwwDalkiaFrReferentielPartenaire.informationsRetour();
		new wwwDalkiaFrReferentielPartenaire.listeAdresses();
		new wwwDalkiaFrReferentielPartenaire.listeAffacturages();
		new wwwDalkiaFrReferentielPartenaire.listeAffacturagesA1();
		new wwwDalkiaFrReferentielPartenaire.listeAffacturagesPA1();
		new wwwDalkiaFrReferentielPartenaire.listeAffacturagesPA2();
		new wwwDalkiaFrReferentielPartenaire.listeClassification();
		new wwwDalkiaFrReferentielPartenaire.listeClassificationP1();
		new wwwDalkiaFrReferentielPartenaire.listeClassificationPA1();
		new wwwDalkiaFrReferentielPartenaire.listeClassificationPA2();
		new wwwDalkiaFrReferentielPartenaire.listeClassificationPR1();
		new wwwDalkiaFrReferentielPartenaire.listeImmatriculationsAnterieures();
		new wwwDalkiaFrReferentielPartenaire.listeMandataires();
		new wwwDalkiaFrReferentielPartenaire.listeMandatairesA1();
		new wwwDalkiaFrReferentielPartenaire.listeMandatairesPA1();
		new wwwDalkiaFrReferentielPartenaire.listeMandatairesPA2();
		new wwwDalkiaFrReferentielPartenaire.listePartenaires();
		new wwwDalkiaFrReferentielPartenaire.listePartenairesDelta();
		new wwwDalkiaFrReferentielPartenaire.listeRecouvrements();
		new wwwDalkiaFrReferentielPartenaire.listeRecouvrementsP1();
		new wwwDalkiaFrReferentielPartenaire.listeRecouvrementsPA1();
		new wwwDalkiaFrReferentielPartenaire.listeRecouvrementsPA2();
		new wwwDalkiaFrReferentielPartenaire.listeResponsables();
		new wwwDalkiaFrReferentielPartenaire.listeResponsablesP1();
		new wwwDalkiaFrReferentielPartenaire.listeResponsablesPA1();
		new wwwDalkiaFrReferentielPartenaire.listeResponsablesPA2();
		new wwwDalkiaFrReferentielPartenaire.listeResponsablesPR1();
		new wwwDalkiaFrReferentielPartenaire.madatairePA1();
		new wwwDalkiaFrReferentielPartenaire.madatairePA2();
		new wwwDalkiaFrReferentielPartenaire.mandataire();
		new wwwDalkiaFrReferentielPartenaire.mandataireA1();
		new wwwDalkiaFrReferentielPartenaire.metadonnees();
		new wwwDalkiaFrReferentielPartenaire.metadonneesA1();
		new wwwDalkiaFrReferentielPartenaire.metadonneesP1();
		new wwwDalkiaFrReferentielPartenaire.metadonneesPA1();
		new wwwDalkiaFrReferentielPartenaire.metadonneesPA2();
		new wwwDalkiaFrReferentielPartenaire.metadonneesPR1();
		new wwwDalkiaFrReferentielPartenaire.ModifierAdresse();
		new wwwDalkiaFrReferentielPartenaire.modifierAdresseReponse();
		new wwwDalkiaFrReferentielPartenaire.modifierAdresseRequete();
		new wwwDalkiaFrReferentielPartenaire.ModifierAdresseResponse();
		new wwwDalkiaFrReferentielPartenaire.ModifierDemandeAdresse();
		new wwwDalkiaFrReferentielPartenaire.modifierDemandeAdresseReponse();
		new wwwDalkiaFrReferentielPartenaire.modifierDemandeAdresseRequete();
		new wwwDalkiaFrReferentielPartenaire.ModifierDemandeAdresseResponse();
		new wwwDalkiaFrReferentielPartenaire.ModifierDemandePartenaire();
		new wwwDalkiaFrReferentielPartenaire.modifierDemandePartenaireReponse();
		new wwwDalkiaFrReferentielPartenaire.modifierDemandePartenaireRequete();
		new wwwDalkiaFrReferentielPartenaire.ModifierDemandePartenaireResponse();
		new wwwDalkiaFrReferentielPartenaire.ModifierPartenaire();
		new wwwDalkiaFrReferentielPartenaire.modifierPartenaireReponse();
		new wwwDalkiaFrReferentielPartenaire.modifierPartenaireRequete();
		new wwwDalkiaFrReferentielPartenaire.ModifierPartenaireResponse();
		new wwwDalkiaFrReferentielPartenaire.ModifierPartenaireRestreint();
		new wwwDalkiaFrReferentielPartenaire.modifierPartenaireRestreintReponse();
		new wwwDalkiaFrReferentielPartenaire.modifierPartenaireRestreintRequete();
		new wwwDalkiaFrReferentielPartenaire.ModifierPartenaireRestreintResponse();
		new wwwDalkiaFrReferentielPartenaire.partenaire();
		new wwwDalkiaFrReferentielPartenaire.partenaireP1();
		new wwwDalkiaFrReferentielPartenaire.partenairePA1();
		new wwwDalkiaFrReferentielPartenaire.partenairePA2();
		new wwwDalkiaFrReferentielPartenaire.partenairePR1();
		new wwwDalkiaFrReferentielPartenaire.partenaireRecherche();
		new wwwDalkiaFrReferentielPartenaire.particulier();
		new wwwDalkiaFrReferentielPartenaire.particulierP1();
		new wwwDalkiaFrReferentielPartenaire.particulierPA1();
		new wwwDalkiaFrReferentielPartenaire.particulierPR1();
		new wwwDalkiaFrReferentielPartenaire.proprietesPartenaire();
		new wwwDalkiaFrReferentielPartenaire.proprietesPartenaireP1();
		new wwwDalkiaFrReferentielPartenaire.proprietesPartenairePA1();
		new wwwDalkiaFrReferentielPartenaire.proprietesPartenairePA2();
		new wwwDalkiaFrReferentielPartenaire.proprietesPartenairePR1();
		new wwwDalkiaFrReferentielPartenaire.RechercherPartenaire();
		new wwwDalkiaFrReferentielPartenaire.rechercherPartenaireReponse();
		new wwwDalkiaFrReferentielPartenaire.rechercherPartenaireRequete();
		new wwwDalkiaFrReferentielPartenaire.RechercherPartenaireResponse();
		new wwwDalkiaFrReferentielPartenaire.recouvrement();
		new wwwDalkiaFrReferentielPartenaire.recouvrementP1();
		new wwwDalkiaFrReferentielPartenaire.recouvrementPA1();
		new wwwDalkiaFrReferentielPartenaire.recouvrementPA2();
		new wwwDalkiaFrReferentielPartenaire.responsable();
		new wwwDalkiaFrReferentielPartenaire.responsableP1();
		new wwwDalkiaFrReferentielPartenaire.responsablePA1();
		new wwwDalkiaFrReferentielPartenaire.responsablePA2();
		new wwwDalkiaFrReferentielPartenaire.responsablePR1();
		new wwwDalkiaFrReferentielPartenaire.societe();
		new wwwDalkiaFrReferentielPartenaire.societePA1();
		new wwwDalkiaFrReferentielPartenaire.societePA2();
	}
	@isTest static void coverCodeForConsulterAdresse(){
		Test.setMock(WebServiceMock.class, new wwwDalkiaFrReferentielPartenaireMockErr());
		wwwDalkiaFrReferentielPartenaire.PartenaireServicePort testObject = new wwwDalkiaFrReferentielPartenaire.PartenaireServicePort();
		System.assertEquals(null, testObject.ConsulterAdresse(null));
	}
	@isTest static void coverCodeForConsulterDemandeAdresse(){
		Test.setMock(WebServiceMock.class, new wwwDalkiaFrReferentielPartenaireMockErr());
		wwwDalkiaFrReferentielPartenaire.PartenaireServicePort testObject = new wwwDalkiaFrReferentielPartenaire.PartenaireServicePort();
		System.assertEquals(null, testObject.ConsulterDemandeAdresse(null));
	}
    @isTest static void coverCodeForConsulterDemandePartenaire(){
        Test.setMock(WebServiceMock.class, new wwwDalkiaFrReferentielPartenaireMockErr());
        wwwDalkiaFrReferentielPartenaire.PartenaireServicePort testObject = new wwwDalkiaFrReferentielPartenaire.PartenaireServicePort();
        System.assertEquals(null, testObject.ConsulterDemandePartenaire(null));
    }
    @isTest static void coverCodeForConsulterPartenaire(){
        Test.setMock(WebServiceMock.class, new wwwDalkiaFrReferentielPartenaireMockErr());
        wwwDalkiaFrReferentielPartenaire.PartenaireServicePort testObject = new wwwDalkiaFrReferentielPartenaire.PartenaireServicePort();
        Date myDate = Date.newInstance(2019, 03, 20);
        Time myTime = Time.newInstance(9, 11, 44, 88);
        DateTime dt = DateTime.newInstance(myDate, myTime);
        Test.setMock(WebServiceMock.class, new wwwDalkiaFrReferentielPartenaireMockErr());
        String RecTypeId= [select Id from RecordType where (DeveloperName='PersonAccount') and (SobjectType='Account')].Id;
        Account acc = new Account();
        acc.FirstName = 'test';
        acc.LastName = 'test';
        acc.BillingCity ='test';
        acc.DKCodeSurPartenaire__c = 'K00000089B';
        acc.BillingPostalCode = '1234';
        acc.Immatriculation_Legale__c = 'test'; 
        acc.EntiteCommercialeDalkia__c = 'J00001002N';
        ACC.Lieu_immatriculation_legale__c = 'TEST';
        acc.LibelleEtablissement__c = 'test';
        acc.Report_Fin_Mois__c = true;
        acc.RecordTypeId = RecTypeId;
        acc.Utilisation_filiere_Commerce__c = 'Actif';
        acc.CodeRecouvrement__c = 'DCWAC02';
        acc.Depart_Exigibilite__c = '2';
        acc.DelaiPaiementJour__c = 2;
        acc.Siege_social_partenaire__c = true;
        acc.Methode_Interet_Retard__c = '123';
        acc.JourMoisSuivant__c = 3;
        Profile p = [SELECT Id FROM Profile WHERE id=:Label.AdminProfileId];
        User u2 = testUtils.CreateUser('standt28', 'user21111@testorg2.com', 'Testing2', p.Id, 'user2rrr@testorg2.com');
        u2.Code_d_Appartenance__c='OCECOM2';
        u2.BypassValidationRules__c =true;
        u2.BypassFilters__c = true;
        insert u2;
        System.runAs(u2) 
        { 
            insert acc;
            test.startTest();
            LC41_EditAccount_Controller.synchronizeAccount(acc.id);
            test.stopTest();
        }
        //System.assertEquals(null, testObject.ConsulterPartenaire(null));
	}
    @isTest static void coverCodeForConsulterPartenaire2(){
        Test.setMock(WebServiceMock.class, new wwwDalkiaFrReferentielPartenaireMockErr());
        wwwDalkiaFrReferentielPartenaire.PartenaireServicePort testObject = new wwwDalkiaFrReferentielPartenaire.PartenaireServicePort();
        Date myDate = Date.newInstance(2019, 03, 20);
        Time myTime = Time.newInstance(9, 11, 44, 88);
        DateTime dt = DateTime.newInstance(myDate, myTime);
        Test.setMock(WebServiceMock.class, new wwwDalkiaFrReferentielPartenaireMockErr());
        String RecTypeId= [select Id from RecordType where (DeveloperName='PersonAccount') and (SobjectType='Account')].Id;
        Account acc = new Account();
        acc.FirstName = 'test';
        acc.LastName = 'test';
        acc.BillingCity ='test';
        acc.DKCodeSurPartenaire__c = 'K00000089B';
        acc.BillingPostalCode = '1234';
        acc.Immatriculation_Legale__c = 'test'; 
        acc.EntiteCommercialeDalkia__c = 'J00001002N';
        ACC.Lieu_immatriculation_legale__c = 'TEST';
        acc.LibelleEtablissement__c = 'test';
        acc.Report_Fin_Mois__c = true;
        acc.RecordTypeId = RecTypeId;
        acc.Utilisation_filiere_Commerce__c = 'Actif';
        acc.CodeRecouvrement__c = 'DCWAC02';
        acc.Depart_Exigibilite__c = '2';
        acc.DelaiPaiementJour__c = 2;
        acc.Siege_social_partenaire__c = true;
        acc.Methode_Interet_Retard__c = '123';
        acc.JourMoisSuivant__c = 3;
        Profile p = [SELECT Id FROM Profile WHERE id=:Label.AdminProfileId];
        User u2 = testUtils.CreateUser('standt28', 'user21111@testorg2.com', 'Testing2', p.Id, 'user2rrr@testorg2.com');
        u2.Code_d_Appartenance__c='OCECOM2';
        u2.BypassValidationRules__c =true;
        u2.BypassFilters__c = true;
        insert u2;
        System.runAs(u2) 
        { 
            test.startTest();
            insert acc;
            LC41_EditAccount_Controller.synchronizeAccount(acc.id);
            test.stopTest();
        }
        //System.assertEquals(null, testObject.ConsulterPartenaire(null));
	}
	@isTest static void coverCodeForCreerAdresse(){
		Test.setMock(WebServiceMock.class, new wwwDalkiaFrReferentielPartenaireMockErr());
		wwwDalkiaFrReferentielPartenaire.PartenaireServicePort testObject = new wwwDalkiaFrReferentielPartenaire.PartenaireServicePort();
		System.assertEquals(null, testObject.CreerAdresse(null));
    }
    @isTest static void coverCodeForCreerPartenaire(){
        Date myDate = Date.newInstance(2019, 03, 20);
        Time myTime = Time.newInstance(9, 11, 44, 88);
        DateTime dt = DateTime.newInstance(myDate, myTime);
        Test.setMock(WebServiceMock.class, new wwwDalkiaFrReferentielPartenaireMockErr());
        wwwDalkiaFrReferentielPartenaire.PartenaireServicePort testObject = new wwwDalkiaFrReferentielPartenaire.PartenaireServicePort();
        String RecTypeId= [select Id from RecordType where (DeveloperName='PersonAccount') and (SobjectType='Account')].Id;
        Account acc = new Account();
        acc.FirstName = 'test';
        acc.LastName = 'test';
        acc.BillingCity ='test';
        acc.BillingPostalCode = '1234';
        acc.ShippingCity ='test';
        acc.ShippingPostalCode = '1234';
        acc.Immatriculation_Legale__c = 'test'; 
        acc.EntiteCommercialeDalkia__c = 'J00001002N';
        acc.Report_Fin_Mois__c = true;
        ACC.Lieu_immatriculation_legale__c = 'TEST';
        acc.LibelleEtablissement__c = 'test';
        acc.RecordTypeId = RecTypeId;
        acc.Utilisation_filiere_Commerce__c = 'Actif';
        acc.CodeRecouvrement__c = 'DCWAC02';
        acc.Siege_social_partenaire__c = true;
        acc.Depart_Exigibilite__c = '2';
        acc.DelaiPaiementJour__c = 2;
        acc.Methode_Interet_Retard__c = '123';
        acc.JourMoisSuivant__c = 3;
        Profile p = [SELECT Id FROM Profile WHERE id=:Label.AdminProfileId];
        User u2 = testUtils.CreateUser('standt28', 'user21111@testorg2.com', 'Testing2', p.Id, 'user2rrr@testorg2.com');
        u2.Code_d_Appartenance__c='OCECOM2';
        u2.BypassValidationRules__c =true;
        u2.BypassFilters__c = true;
        insert u2;
        System.runAs(u2) 
        { 
            insert acc;
        }
        //System.assertEquals(null, testObject.CreerPartenaire(null));
    }
	@isTest static void coverCodeForCreerPartenaireIdExterne(){
		Date myDate = Date.newInstance(2019, 03, 20);
        Time myTime = Time.newInstance(9, 11, 44, 88);
        DateTime dt = DateTime.newInstance(myDate, myTime);
        Test.setMock(WebServiceMock.class, new wwwDalkiaFrReferentielPartenaireMockErr());
        wwwDalkiaFrReferentielPartenaire.PartenaireServicePort testObject = new wwwDalkiaFrReferentielPartenaire.PartenaireServicePort();
        String RecTypeId= [select Id from RecordType where (DeveloperName='PersonAccount') and (SobjectType='Account')].Id;
        Account acc = new Account();
        acc.FirstName = 'test';
        acc.LastName = 'test';
        acc.BillingCountry ='France';
        acc.BillingCity ='test';
        acc.BillingPostalCode = '1234';
        acc.ShippingCity ='test';
        acc.ShippingPostalCode = '1234';
        acc.Immatriculation_Legale__c = 'test'; 
        acc.EntiteCommercialeDalkia__c = 'J00001002N';
        ACC.Lieu_immatriculation_legale__c = 'TEST';
        acc.LibelleEtablissement__c = 'test';
        acc.RecordTypeId = RecTypeId;
        acc.Siege_social_partenaire__c = true;
        acc.Utilisation_filiere_Commerce__c = 'Actif';
        acc.CodeRecouvrement__c = 'DCWAC02';
        acc.Depart_Exigibilite__c = '2';
        acc.DelaiPaiementJour__c = 2;
        acc.Report_Fin_Mois__c = true;
        acc.Methode_Interet_Retard__c = '123';
        acc.JourMoisSuivant__c = 3;
        Profile p = [SELECT Id FROM Profile WHERE id=:Label.AdminProfileId];
        User u2 = testUtils.CreateUser('standt28', 'user21111@testorg2.com', 'Testing2', p.Id, 'user2rrr@testorg2.com');
        u2.Code_d_Appartenance__c='OCECOM2';
        u2.BypassValidationRules__c =true;
        u2.BypassFilters__c = true;
        Pays__c pays = new Pays__c();
        pays.Name = 'France';
        pays.Abreviation__c = 'FR';
        pays.Nom__c = 'FRANCE';
        insert pays;
        insert u2;
        System.runAs(u2) 
        { 
            String accString = Json.serialize(acc);
            LC13_CreationPartenaire_Controller.insertAccounts(accString);
        }
        //System.assertEquals(null, testObject.CreerPartenaireIdExterne(null));
	}
	@isTest static void coverCodeForDemanderCreationAdresse(){
		Test.setMock(WebServiceMock.class, new wwwDalkiaFrReferentielPartenaireMockErr());
		wwwDalkiaFrReferentielPartenaire.PartenaireServicePort testObject = new wwwDalkiaFrReferentielPartenaire.PartenaireServicePort();
		System.assertEquals(null, testObject.DemanderCreationAdresse(null));
	}
	@isTest static void coverCodeForDemanderCreationPartenaire(){
		Test.setMock(WebServiceMock.class, new wwwDalkiaFrReferentielPartenaireMockErr());
		wwwDalkiaFrReferentielPartenaire.PartenaireServicePort testObject = new wwwDalkiaFrReferentielPartenaire.PartenaireServicePort();
		System.assertEquals(null, testObject.DemanderCreationPartenaire(null));
	}
	@isTest static void coverCodeForDemanderModificationAdresse(){
		Test.setMock(WebServiceMock.class, new wwwDalkiaFrReferentielPartenaireMockErr());
		wwwDalkiaFrReferentielPartenaire.PartenaireServicePort testObject = new wwwDalkiaFrReferentielPartenaire.PartenaireServicePort();
		System.assertEquals(null, testObject.DemanderModificationAdresse(null));
	}
	@isTest static void coverCodeForDemanderModificationPartenaire(){
		Test.setMock(WebServiceMock.class, new wwwDalkiaFrReferentielPartenaireMockErr());
		wwwDalkiaFrReferentielPartenaire.PartenaireServicePort testObject = new wwwDalkiaFrReferentielPartenaire.PartenaireServicePort();
		System.assertEquals(null, testObject.DemanderModificationPartenaire(null));
	}
	@isTest static void coverCodeForModifierAdresse(){
		Test.setMock(WebServiceMock.class, new wwwDalkiaFrReferentielPartenaireMockErr());
		wwwDalkiaFrReferentielPartenaire.PartenaireServicePort testObject = new wwwDalkiaFrReferentielPartenaire.PartenaireServicePort();
        Date myDate = Date.newInstance(2019, 03, 20);
        Time myTime = Time.newInstance(9, 11, 44, 88);
        DateTime dt = DateTime.newInstance(myDate, myTime);
        Test.setMock(WebServiceMock.class, new wwwDalkiaFrReferentielPartenaireMockErr());
        String RecTypeId= [select Id from RecordType where (DeveloperName='PersonAccount') and (SobjectType='Account')].Id;
        Account acc = new Account();
        acc.FirstName = 'test';
        acc.LastName = 'test';
        acc.BillingCity ='test';
        acc.BillingPostalCode = '1234';
        acc.ShippingCity ='test';
        acc.ShippingPostalCode = '1234';
        acc.DkCodeAdressePrincipale__c = '12345';
        acc.BillingPostalCode = '1234';
        acc.Immatriculation_Legale__c = 'test'; 
        acc.EntiteCommercialeDalkia__c = 'J00001002N';
        ACC.Lieu_immatriculation_legale__c = 'TEST';
        acc.LibelleEtablissement__c = 'test';
        acc.RecordTypeId = RecTypeId;
        acc.Siege_social_partenaire__c = true;
        acc.Utilisation_filiere_Commerce__c = 'Actif';
        acc.CodeRecouvrement__c = 'DCWAC02';
        acc.Depart_Exigibilite__c = '2';
        acc.DelaiPaiementJour__c = 2;
        acc.Methode_Interet_Retard__c = '123';
        acc.JourMoisSuivant__c = 3;
        acc.Report_Fin_Mois__c = true;
        Profile p = [SELECT Id FROM Profile WHERE id=:Label.AdminProfileId];
        User u2 = testUtils.CreateUser('standt28', 'user21111@testorg2.com', 'Testing2', p.Id, 'user2rrr@testorg2.com');
        u2.Code_d_Appartenance__c='OCECOM2';
        u2.BypassValidationRules__c =true;
        u2.BypassFilters__c = true;
        PAD.PAD_BypassTrigger+='AP45_Account';
        insert u2;
        System.runAs(u2) 
        {
            insert acc;
            test.startTest();
            TriggerUtility.RunOnce = false;
            acc.DKCodeSurPartenaire__c = 'KO124126';
            PAD.PAD_BypassTrigger='';
            List<Account> lstAcct = new List<Account>();
            lstAcct.add(acc);
            String jsonLog = Json.serialize(new WebserviceLog__c());
            AP47_ModifierAdresse.ModifierAdresse(json.serialize(lstAcct),jsonLog);
            AP47_ModifierAdresse.handleList(lstAcct,'update');
            
            test.stopTest();
        }
        //System.assertEquals(null, testObject.ModifierAdresse(null));
    }
    @isTest static void coverCodeForModifierDemandeAdresse(){
		Test.setMock(WebServiceMock.class, new wwwDalkiaFrReferentielPartenaireMockErr());
		wwwDalkiaFrReferentielPartenaire.PartenaireServicePort testObject = new wwwDalkiaFrReferentielPartenaire.PartenaireServicePort();
		System.assertEquals(null, testObject.ModifierDemandeAdresse(null));
	}
	@isTest static void coverCodeForModifierDemandePartenaire(){
		Test.setMock(WebServiceMock.class, new wwwDalkiaFrReferentielPartenaireMockErr());
		wwwDalkiaFrReferentielPartenaire.PartenaireServicePort testObject = new wwwDalkiaFrReferentielPartenaire.PartenaireServicePort();
		System.assertEquals(null, testObject.ModifierDemandePartenaire(null));
	}
	@isTest static void coverCodeForModifierPartenaire(){
		Date myDate = Date.newInstance(2019, 03, 20);
        Time myTime = Time.newInstance(9, 11, 44, 88);
        DateTime dt = DateTime.newInstance(myDate, myTime);
        Test.setMock(WebServiceMock.class, new wwwDalkiaFrReferentielPartenaireMockErr());
        wwwDalkiaFrReferentielPartenaire.PartenaireServicePort testObject = new wwwDalkiaFrReferentielPartenaire.PartenaireServicePort();
        String RecTypeId= [select Id from RecordType where (DeveloperName='PersonAccount') and (SobjectType='Account')].Id;
        Account acc = new Account();
        acc.FirstName = 'test';
        acc.LastName = 'test';
        acc.BillingCity ='test';
        acc.BillingPostalCode = '1234';
        acc.ShippingCity ='test';
        acc.ShippingPostalCode = '1234';
        acc.Immatriculation_Legale__c = 'test'; 
        acc.EntiteCommercialeDalkia__c = 'J00001002N';
        acc.Report_Fin_Mois__c = true;
        ACC.Lieu_immatriculation_legale__c = 'TEST';
        acc.LibelleEtablissement__c = 'test';
        acc.RecordTypeId = RecTypeId;
        acc.Utilisation_filiere_Commerce__c = 'Actif';
        acc.CodeRecouvrement__c = 'DCWAC02';
        acc.Depart_Exigibilite__c = '2';
        acc.DelaiPaiementJour__c = 2;
        acc.Siege_social_partenaire__c = true;
        acc.Methode_Interet_Retard__c = '123';
        acc.JourMoisSuivant__c = 3;
        
        String RecTypeId1= [select Id from RecordType where (DeveloperName=:Label.Business_Account) and (SobjectType='Account')].Id;
        Account acc1 = new Account();
        acc1.name = 'test1';
        acc1.BillingCity ='test1';
        acc1.BillingPostalCode = '12341';
        acc1.ShippingCity ='test1';
        acc1.ShippingPostalCode = '12341';
        acc1.Immatriculation_Legale__c = 'test1'; 
        acc1.EntiteCommercialeDalkia__c = 'J00001002N';
        acc1.Report_Fin_Mois__c = true;
        ACC1.Lieu_immatriculation_legale__c = 'TEST1';
        acc1.LibelleEtablissement__c = 'test1';
        acc1.RecordTypeId = RecTypeId1;
        acc1.Utilisation_filiere_Commerce__c = 'Actif';
        acc1.CodeRecouvrement__c = 'DCWAC02';
        acc1.Depart_Exigibilite__c = '3';
        acc1.DelaiPaiementJour__c = 2;
        acc1.Siege_social_partenaire__c = true;
        acc1.Methode_Interet_Retard__c = '1223';
        acc1.JourMoisSuivant__c = 5;
        
        Profile p = [SELECT Id FROM Profile WHERE id=:Label.AdminProfileId];
        User u2 = testUtils.CreateUser('standt28', 'user21111@testorg2.com', 'Testing2', p.Id, 'user2rrr@testorg2.com');
        u2.Code_d_Appartenance__c='OCECOM2';
        u2.BypassValidationRules__c =true;
        u2.BypassFilters__c = true;
        PAD.PAD_BypassTrigger+='AP45_Account;AP01_Account;AP02_Account';
        insert u2;
        System.runAs(u2) 
        { 
            insert acc1;
            insert acc;
            TriggerUtility.RunOnce = false;
            acc.DKCodeSurPartenaire__c = 'KO124125';
            acc.DKCodeSurPartenaire__c = 'KO124126';
            List<Account> lstAcct = new List<Account>();
            List<Account> lstAcct1 = new List<Account>();
            lstAcct.add(acc);
            lstAcct1.add(acc1);
            String jsonLog = Json.serialize(new WebserviceLog__c());
            test.startTest();
            AP45_AccountCallouts.ModifierPartenaire(json.serialize(lstAcct),jsonLog);
            AP45_AccountCallouts.handleList(lstAcct1,'update');
            test.stopTest();
        }
        //System.assertEquals(null, testObject.ModifierPartenaire(null));
    }
    @isTest static void coverCodeForModifierPartenaire2(){
		Date myDate = Date.newInstance(2019, 03, 20);
        Time myTime = Time.newInstance(9, 11, 44, 88);
        DateTime dt = DateTime.newInstance(myDate, myTime);
        Test.setMock(WebServiceMock.class, new wwwDalkiaFrReferentielPartenaireMockErr());
        wwwDalkiaFrReferentielPartenaire.PartenaireServicePort testObject = new wwwDalkiaFrReferentielPartenaire.PartenaireServicePort();
        String RecTypeId= [select Id from RecordType where (DeveloperName='PersonAccount') and (SobjectType='Account')].Id;
        Account acc = new Account();
        acc.FirstName = 'test';
        acc.LastName = 'test';
        acc.BillingCity ='test';
        acc.BillingPostalCode = '1234';
        acc.ShippingCity ='test';
        acc.ShippingPostalCode = '1234';
        acc.Immatriculation_Legale__c = 'test'; 
        acc.EntiteCommercialeDalkia__c = 'J00001002N';
        acc.Report_Fin_Mois__c = true;
        ACC.Lieu_immatriculation_legale__c = 'TEST';
        acc.LibelleEtablissement__c = 'test';
        acc.RecordTypeId = RecTypeId;
        acc.Utilisation_filiere_Commerce__c = 'Actif';
        acc.CodeRecouvrement__c = 'DCWAC02';
        acc.Depart_Exigibilite__c = '2';
        acc.DelaiPaiementJour__c = 2;
        acc.Siege_social_partenaire__c = true;
        acc.Methode_Interet_Retard__c = '123';
        acc.JourMoisSuivant__c = 3;
        Profile p = [SELECT Id FROM Profile WHERE id=:Label.AdminProfileId];
        User u2 = testUtils.CreateUser('standt28', 'user21111@testorg2.com', 'Testing2', p.Id, 'user2rrr@testorg2.com');
        u2.Code_d_Appartenance__c='OCECOM2';
        u2.BypassValidationRules__c =true;
        u2.BypassFilters__c = true;
        PAD.PAD_BypassTrigger='AP45_Account;';
        insert u2;
        System.runAs(u2) 
        { 
            insert acc;
            TriggerUtility.RunOnce = false;
            acc.DKCodeSurPartenaire__c = 'KO124125';
            List<Account> lstAcct = new List<Account>();
            lstAcct.add(acc);
            String jsonLog = Json.serialize(new WebserviceLog__c());
            test.startTest();
            AP45_AccountCallouts.ModifierPartenaire(json.serialize(lstAcct),jsonLog);
            test.stopTest();
        }
        //System.assertEquals(null, testObject.ModifierPartenaire(null));
    }
	@isTest static void coverCodeForModifierPartenaireRestreint(){
		Test.setMock(WebServiceMock.class, new wwwDalkiaFrReferentielPartenaireMockErr());
		Date myDate = Date.newInstance(2019, 03, 20);
        Time myTime = Time.newInstance(9, 11, 44, 88);
        DateTime dt = DateTime.newInstance(myDate, myTime);
        Test.setMock(WebServiceMock.class, new wwwDalkiaFrReferentielPartenaireMockErr());
        wwwDalkiaFrReferentielPartenaire.PartenaireServicePort testObject = new wwwDalkiaFrReferentielPartenaire.PartenaireServicePort();
        String RecTypeId = Schema.SObjectType.Account.getRecordTypeInfosByDeveloperName().get(Label.Business_Account).getRecordTypeId();
        Account acc = new Account();
        acc.Name = 'test';
        acc.BillingCity ='test';
        acc.BillingPostalCode = '1234';
        acc.ShippingCity ='test';
        acc.ShippingPostalCode = '1234';
        acc.Immatriculation_Legale__c = 'test'; 
        acc.EntiteCommercialeDalkia__c = 'J00001002N';
        ACC.Lieu_immatriculation_legale__c = 'TEST';
        acc.LibelleEtablissement__c = 'test';
        acc.Siege_social_partenaire__c = true;
        acc.RecordTypeId = RecTypeId;
        acc.Utilisation_filiere_Commerce__c = 'Actif';
        acc.Report_Fin_Mois__c = true;
        acc.CodeRecouvrement__c = 'DCWAC02';
        acc.Depart_Exigibilite__c = '2';
        acc.DelaiPaiementJour__c = 2;
        acc.Methode_Interet_Retard__c = '123';
        acc.JourMoisSuivant__c = 3;
        Profile p = [SELECT Id FROM Profile WHERE id=:Label.AdminProfileId];
        User u2 = testUtils.CreateUser('standt28', 'user21111@testorg2.com', 'Testing2', p.Id, 'user2rrr@testorg2.com');
        u2.Code_d_Appartenance__c='OCECOM2';
        u2.BypassValidationRules__c =true;
        u2.BypassFilters__c = true;
        PAD.PAD_BypassTrigger+='AP45_Account';
        insert u2;
        System.runAs(u2) 
        {
            insert acc;
            test.startTest();
            TriggerUtility.RunOnce = false;
            acc.DKCodeSurPartenaire__c = 'KO124124';
            PAD.PAD_BypassTrigger='';
            List<Account> lstAcct = new List<Account>();
            lstAcct.add(acc);
            String jsonLog = Json.serialize(new WebserviceLog__c());
            AP45_AccountCallouts.ModifierPartenaireRestreint(json.serialize(lstAcct),jsonLog);
            test.stopTest();
        }
        //System.assertEquals(null, testObject.ModifierPartenaireRestreint(null));
    }
    @isTest static void coverCodeForModifierPartenaireRestreint2(){
		Test.setMock(WebServiceMock.class, new wwwDalkiaFrReferentielPartenaireMockErr());
		Date myDate = Date.newInstance(2019, 03, 20);
        Time myTime = Time.newInstance(9, 11, 44, 88);
        DateTime dt = DateTime.newInstance(myDate, myTime);
        Test.setMock(WebServiceMock.class, new wwwDalkiaFrReferentielPartenaireMockErr());
        wwwDalkiaFrReferentielPartenaire.PartenaireServicePort testObject = new wwwDalkiaFrReferentielPartenaire.PartenaireServicePort();
        String RecTypeId = Schema.SObjectType.Account.getRecordTypeInfosByDeveloperName().get(Label.Business_Account).getRecordTypeId();
        Account acc = new Account();
        acc.Name = 'test';
        acc.BillingCity ='test';
        acc.BillingPostalCode = '1234';
        acc.ShippingCity ='test';
        acc.ShippingPostalCode = '1234';
        acc.Immatriculation_Legale__c = 'test'; 
        acc.EntiteCommercialeDalkia__c = 'J00001002N';
        ACC.Lieu_immatriculation_legale__c = 'TEST';
        acc.LibelleEtablissement__c = 'test';
        acc.Siege_social_partenaire__c = true;
        acc.RecordTypeId = RecTypeId;
        acc.Utilisation_filiere_Commerce__c = 'Actif';
        acc.Report_Fin_Mois__c = true;
        acc.CodeRecouvrement__c = 'DCWAC02';
        acc.Depart_Exigibilite__c = '2';
        acc.DelaiPaiementJour__c = 2;
        acc.Methode_Interet_Retard__c = '123';
        acc.JourMoisSuivant__c = 3;
        Profile p = [SELECT Id FROM Profile WHERE id=:Label.AdminProfileId];
        User u2 = testUtils.CreateUser('standt28', 'user21111@testorg2.com', 'Testing2', p.Id, 'user2rrr@testorg2.com');
        u2.Code_d_Appartenance__c='OCECOM2';
        u2.BypassValidationRules__c =true;
        u2.BypassFilters__c = true;
        PAD.PAD_BypassTrigger='';
        insert u2;
        System.runAs(u2) 
        {            
            test.startTest();
            insert acc;
            TriggerUtility.RunOnce = false;
            acc.DKCodeSurPartenaire__c = 'KO124124';
            PAD.PAD_BypassTrigger='';
            List<Account> lstAcct = new List<Account>();
            lstAcct.add(acc);
            String jsonLog = Json.serialize(new WebserviceLog__c());
            AP45_AccountCallouts.ModifierPartenaireRestreint(json.serialize(lstAcct),jsonLog);
            test.stopTest();
        }
        //System.assertEquals(null, testObject.ModifierPartenaireRestreint(null));
    }
    @isTest static void coverCodeForRechercherPartenaire(){
        Test.setMock(WebServiceMock.class, new wwwDalkiaFrReferentielPartenaireMockErr());
		wwwDalkiaFrReferentielPartenaire.PartenaireServicePort testObject = new wwwDalkiaFrReferentielPartenaire.PartenaireServicePort();
		System.assertEquals(null, testObject.RechercherPartenaire(null));
	}
}